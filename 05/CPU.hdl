/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */


// C instruction
// dest = comp ; jump
//
// 1 1 1 a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
// 1514131211 10 9  8  7  6  5  4  3  2  1  0
//
// d1 -> A
// d2 -> D
// d3 -> M
//
// j1 -> jump if <0
// j2 -> jump if =0
// j3 -> jump if >0

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16    (a=instruction, b=aluout, sel=instruction[15], out=mux1out);
    And      (a=instruction[15], b=instruction[5], out=awrite);
    Not      (in=instruction[15], out=notins15);
    Or       (a=awrite, b=notins15, out=awrite2);
    ARegister(in=mux1out, load=awrite2, out=areg, out[0..14]=addressM);
    And      (a=instruction[15], b=instruction[4], out=dwrite);
    DRegister(in=aluout, load=dwrite, out=dreg);
    Mux16    (a=areg, b=inM, sel=instruction[12], out=mux2out);

    ALU(x=dreg, y=mux2out, zx=instruction[11],
                           nx=instruction[10],
                           zy=instruction[9],
                           ny=instruction[8],
                           f=instruction[7],
                           no=instruction[6],
        out=aluout,
        out=outM,
        zr=aluzr,
        ng=alung);

    And(a=instruction[15], b=instruction[3], out=writeM);

    // Jump resolver
    Not(in=alung, out=pos); // Positive output from alu?
    Not(in=aluzr, out=nz);
    And(a=nz, b=pos, out=gt1);
    And(a=gt1, b=instruction[0], out=gt2);
    And(a=aluzr, b=instruction[1], out=eq);
    And(a=alung, b=instruction[2], out=lt);
    Or (a=gt2, b=eq, out=gte);
    Or (a=gte, b=lt, out=jmp);

    And(a=jmp, b=instruction[15], out=jmp2);

    PC(in=areg, load=jmp2, inc=true, reset=reset, out[0..14]=pc);

}
